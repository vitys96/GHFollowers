//
//  FollowerListViewController.swift
//  GitHubFollowers
//
//  Created TOOK on 06.01.2020.
//  Copyright Â© 2020 TOOK. All rights reserved.
//
//  Template generated by Sakhabaev Egor @Banck
//  https://github.com/Banck/Swift-viper-template-for-xcode
//

import UIKit
import CollectionKit

class FollowerListViewController: UIViewController {
    // MARK: - Properties
    var presenter: FollowerListPresenterInterface?
    let collectionView = CollectionView()
    var cellsDataSource = ArrayDataSource<FollowerCell.Data>(data: [])
    var followersData: [FollowerCell.Data] = []
    var filterFollowersData: [FollowerCell.Data] = []
    private var isFetching: Bool = false
    private var isSearching: Bool = false
    
    
    
    // MARK: - Lifecycle -
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.setNavigationBarHidden(false, animated: true)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureUI()
        presenter?.viewDidLoad()
    }
    
}



// MARK: - FollowerListView
extension FollowerListViewController: FollowerListView {
    func display(_ followersList: [FollowerCell.Data]) {
        followersData.append(contentsOf: followersList)
        cellsDataSource.data.append(contentsOf: followersList)
        let selectionSportAction = { [weak self] (context: FollowerCellProvider.TapContext) -> Void in
            guard let self = self else { return }
            let followerData = followersList[context.index].userName
            self.presenter?.didSelectFollowerCell(followerName: followerData)
        }
        collectionView.provider = FollowerCellProvider(cellsDataSource, tapHandler: selectionSportAction)
        collectionView.reloadData()
    }
}

extension FollowerListViewController {
    private func configureUI() {
        self.view.backgroundColor = .systemBackground
        configureCollection()
        configureSearchController()
        self.view.collectionAnimator = WobbleAnimator()
    }
    
    private func configureCollection() {
        view.addSubview(collectionView)
        collectionView.backgroundColor = .systemBackground
        collectionView.fillSuperview()
        collectionView.alwaysBounceVertical = true
        collectionView.delaysContentTouches = false
        collectionView.delegate = self
        collectionView.keyboardDismissMode = .onDrag
        
        
    }
    private func configureSearchController() {
        let searchVC = UISearchController(searchResultsController: nil)
        searchVC.searchResultsUpdater = self
        searchVC.searchBar.delegate = self
        searchVC.searchBar.placeholder = "Search for a username"
        searchVC.obscuresBackgroundDuringPresentation = false
        searchVC.hidesNavigationBarDuringPresentation = false
        navigationItem.hidesSearchBarWhenScrolling = false
        navigationItem.searchController = searchVC
        self.definesPresentationContext = true
    }
}

// MARK: - UISearchResultsUpdating
extension FollowerListViewController: UISearchResultsUpdating {
    func updateSearchResults(for searchController: UISearchController) {
        guard let filter = searchController.searchBar.text, !filter.isEmpty else { return }
        isSearching = true
        filterFollowersData = cellsDataSource.data.filter{ $0.userName.lowercased().contains(filter.lowercased()) }
        cellsDataSource.data = filterFollowersData
        
    }
}

// MARK: - UISearchBarDelegate
extension FollowerListViewController: UISearchBarDelegate {
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        isSearching = false
        cellsDataSource.data = followersData
        collectionView.reloadData()
    }
}

// MARK: - UIScrollViewDelegate
extension FollowerListViewController: UIScrollViewDelegate {
    func scrollViewDidEndDragging(_ scrollView: UIScrollView, willDecelerate decelerate: Bool) {
        let offsetY = scrollView.contentOffset.y
        let contentHeight = scrollView.contentSize.height
        if offsetY > contentHeight / 1.5 - scrollView.frame.height {
            if !isFetching {
                fetchingMore()
            }
        }
    }
    private func fetchingMore() {
        isFetching = true
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.01) {
            self.presenter?.fetchData()
            self.isFetching = false
        }
    }
}



